@startuml
' --- Taille et qualitÃ© ---
scale max 4096 width
skinparam dpi 300

' --- Style gÃ©nÃ©ral ---
skinparam backgroundColor #f8f8f8
skinparam classAttributeIconSize 0
skinparam classFontStyle bold
skinparam shadowing false
skinparam packageStyle rectangle
skinparam defaultFontName "Consolas"

title World of ECN - Diagramme de classes dÃ©taillÃ© (branche haytam)
interface Analyze {
}

class Archer {
    - nbFleches : int
    + getNbFleches( ) : int
    + setNbFleches(int nbFleches) : void
    + combattre(Creature c, Set<Point2D> positionWorld, List<Creature> creatures) : void
    + jeuDeAtt( ) : boolean
    + jeuDeDe(Creature c) : boolean
    + affiche( ) : void
    + saveArcher(Connection conn, int idPersonnage) : void
    + combattre(Creature c, Set<Point2D> positionWorld) : void
}

Archer --|> Personnage
Archer ..|> Combattant
interface Combattant {
}

class ConnexionBD {
    - conn : Connection
    + connect( ) : void
    + getConnection( ) : Connection
    + close( ) : void
}

class Creature {
    # etat : boolean
    # ptVie : int
    # degAtt : int
    # ptPar : int
    # pageAtt : int
    # pagePar : int
    # distAttMax : int
    # distanceVision : int
    + getPtVie( ) : int
    + setPtVie(int ptVie) : void
    + getDegAtt( ) : int
    + setDegAtt(int degAtt) : void
    + getPtPar( ) : int
    + setPtPar(int ptPar) : void
    + getPageAtt( ) : int
    + setPageAtt(int pageAtt) : void
    + getPagePar( ) : int
    + setPagePar(int pagePar) : void
    + getDistanceVision( ) : int
    + setDistanceVision(int distanceVision) : void
    + getDistAttMax( ) : int
    + setDistAttMax(int distAttMax) : void
    + isEtat( ) : boolean
    + setEtat(boolean etat) : void
    + deplacer(int dx, int dy) : void
    + deplacementAleatoire(Set<Point2D> positionsOccupees, int tailleMonde) : void
    + mourir(Set<Point2D> positionWorld, List<Creature> creatures) : void
    + affiche( ) : void
    + deplaceAleatoire( ) : void
    + mourir(Set<Point2D> positionWorld) : void
}

Creature --|> ElementDeJeu
Creature ..|> Deplacable
interface Deplacable {
}

abstract class ElementDeJeu {
    # nom : String
    # pos : Point2D
    + getNom( ) : String
    + setNom(String nom) : void
    + getPos( ) : Point2D
    + setPos(Point2D pos) : void
}

class Epee {
    - pAtt : int
    - effet : Etat
    + getEffet( ) : Etat
    + setEffet(Etat effet) : void
    + getpAtt( ) : int
    + setpAtt(int pAtt) : void
    + saveToDB(Connection conn, int idPartie) : void
}

Epee --|> Objet
class Erreurs {
    + demonstrationErreursJava( ) : void
    - afficherErreur(Exception e) : void
    - methodeRecursive(int compteur) : void
    - GenerationM(int id, Point2D p) : Monstre
}

class Guerrier {
    + combattre(Creature c, Set<Point2D> positionWorld,List<Creature> creatures) : void
    + jeuDeAtt( ) : boolean
    + jeuDeDe(Creature c) : boolean
    + saveGuerrier(Connection conn, int idPersonnage) : void
}

Guerrier --|> Personnage
Guerrier ..|> Combattant
class Joueur {
    + hero : Personnage
    - nomJoueur : String
    - actionEffectuee : boolean
    + getNomJoueur( ) : String
    + setNomJoueur(String nomJoueur) : void
    + getHero( ) : Personnage
    + setHero(Personnage hero) : void
    + analyzer(Set<Point2D> positionWorld, List<Creature> creatures, List<Objet> objets, int tailleMonde) : void
    + analyzer(Set<Point2D> positionWorld, List<Creature> creatures, List<Objet> objets, World world, Connection conn) : void
    + deplacerController(List<Creature> creatures, int tailleMonde) : void
    + attaqueController(List<Creature> ciblesAdjacentes, Set<Point2D> positionWorld, List<Creature> creatures) : void
    + interactionController(Objet o, Set<Point2D> positionWorld, List<Objet> objets) : void
    + utiliserObjetController( ) : void
    + saveToDB(Connection conn, int idPersonnage) : void
    + chargerPartieDepuisDebut(Connection conn, World world) : void
}

Joueur ..|> Analyze
class Lapin {
    + saveToDB(Connection conn, int idPartie) : void
}

Lapin --|> Monstre
class Loup {
    + combattre(Creature c, Set<Point2D> positionWorld,List<Creature> creatures) : void
    + jeuDeAtt( ) : boolean
    + jeuDeDe(Creature c) : boolean
    + saveToDB(Connection conn, int idPartie) : void
}

Loup --|> Monstre
Loup ..|> Combattant
class Monstre {
    - dangerosite : Dangerosite
    + getDangerosite( ) : Dangerosite
    + setDangerosite(Dangerosite dangerosite) : void
    + analyzer(Set<Point2D> positionWorld, List<Creature> creatures, List<Objet> objets, int tailleMonde) : void
    + affiche( ) : void
}

Monstre --|> Creature
Monstre ..|> Analyze
class Nourriture {
    - coolDown : int
    - typeNourriture : Nourritures
    - genererCoolDownAleatoire(Nourritures type) : int
    + getCoolDown( ) : int
    + setCoolDown(int coolDown) : void
    + getTypeNourriture( ) : Nourritures
    + setTypeNourriture(Nourritures typeNourriture) : void
    + getNom( ) : String
    + setNom(String nom) : void
    + getPos( ) : Point2D
    + setPos(Point2D pos) : void
    + appliquerEffet(Personnage p) : void
    + retirerEffet(Personnage p) : void
    + decrementerDuree( ) : void
    + estActif( ) : boolean
    + saveToDB(Connection conn, int idPartie) : void
}

Nourriture --|> Objet
Nourriture ..|> ObjetUtilisable
class NuageToxique {
    - degatParTour : int
    - taille : int
    - duree : int
    + getDegatParTour( ) : int
    + setDegatParTour(int degatParTour) : void
    + getTaille( ) : int
    + setTaille(int taille) : void
    + getDuree( ) : int
    + setDuree(int duree) : void
    + decrementerDuree( ) : void
    + estActif( ) : boolean
    + deplacer(int dx, int dy) : void
    + deplacementAleatoire(Set<Point2D> positionsOccupees, int tailleMonde) : void
    + combattre(Creature c, Set<Point2D> positionWorld, List<Creature> creatures) : void
    + analyzer(Set<Point2D> positionWorld, List<Creature> creatures, List<Objet> objets, int tailleMonde) : void
    + saveToDB(Connection conn, int idPartie) : void
}

NuageToxique --|> Objet
NuageToxique ..|> Deplacable
NuageToxique ..|> Combattant
NuageToxique ..|> Analyze
class Objet {
    - description : String
    + getDescription( ) : String
    + setDescription(String description) : void
    + getPosition( ) : Point2D
    + setPosition(Point2D position) : void
    + affiche( ) : void
}

Objet --|> ElementDeJeu
interface ObjetUtilisable {
}

class Paysan {
    + savePaysan(Connection conn, int idPersonnage) : void
}

Paysan --|> Personnage
class Personnage {
    - effetsActifs : List<ObjetUtilisable>
    - inventaire : List<Objet>
    + getEffetsActifs( ) : List<ObjetUtilisable>
    + setEffetsActifs(List<ObjetUtilisable> effetsActifs) : void
    + getInventaire( ) : List<Objet>
    + setInventaire(List<Objet> inventaire) : void
    + prendObjet(Objet o, Set<Point2D> positionWorld) : void
    + mettreAJourEffets( ) : void
    + analyzer(Set<Point2D> positionWorld, List<Creature> creatures, List<Objet> objets, int tailleMonde) : void
    + saveToDB(Connection conn, int idPartie) : void
}

Personnage --|> Creature
Personnage ..|> Analyze
class Point2D {
    - x : int
    - y : int
    + getX( ) : int
    + getY( ) : int
    + setX(int x) : void
    + setY(int y) : void
    + setPosition(int x, int y) : void
    + translate(int dx, int dy) : void
    + affiche( ) : void
    + distance(Point2D p) : float
    + equals(Object obj) : boolean
    + hashCode( ) : int
}

class PotionSoin {
    - pVie : int
    + getpVie( ) : int
    + setpVie(int pVie) : void
    + saveToDB(Connection conn, int idPartie) : void
}

PotionSoin --|> Objet
class TestWoE {
}

class World {
    + TAILLE_MONDE : int
    + ListCreature : ArrayList<Creature>
    + ListObjets : LinkedList<Objet>
    + ListAnalyze : ArrayList<Analyze>
    + ListElementJeu : ArrayList<ElementDeJeu>
    - currentPartieId : int
    - currentTurn : int
    - remainingTurns : int
    + getCurrentPartieId( ) : int
    + setCurrentPartieId(int id) : void
    + getCurrentTurn( ) : int
    + getRemainingTurns( ) : int
    + creationJoueur( ) : Joueur
    + creerMondeAlea( ) : void
    - generationCreatures(int n, Random rand, Collection<Creature> col) : void
    - generationObjets(int n, Random rand, Collection<Objet> col) : void
    - positionAleatoire(Random rand) : Point2D
    + tourDeJour(int nbTours, Joueur moi, Connection conn) : void
    + afficheWorld(Joueur moi) : void
    - placerDansMonde(char[][] monde, ElementDeJeu e, char s) : void
    - getSymbolePourCreature(Creature c) : char
    - getSymbolePourObjet(Objet o) : char
    - afficherZoneVisible(char[][] monde, Creature hero) : void
    - GenerationP(int id, Point2D p) : Personnage
    - GenerationM(int id, Point2D p) : Monstre
    - GenerationO(int id, Point2D p) : Objet
    + saveWorldToDB(Connection conn, Joueur joueur, String nomPartie, int tourActuel, int toursRestants) : int
    + loadWorldFromDB(Connection conn, int idPartie, Joueur joueur) : void
}

@enduml
